/* eslint-disable */
// @generated by protobuf-ts 2.9.3 with parameter eslint_disable
// @generated from protobuf file "user.proto" (package "user", syntax proto3)
// tslint:disable
import type { RpcTransport } from "@protobuf-ts/runtime-rpc";
import type { ServiceInfo } from "@protobuf-ts/runtime-rpc";
import { Users } from "./user";
import type { EmptyReply } from "./user";
import type { UserUpdateReply } from "./user";
import type { UserUpdateRequest } from "./user";
import type { UserCreateReply } from "./user";
import type { UserCreateRequest } from "./user";
import type { UserReply } from "./user";
import type { UserFindRequest } from "./user";
import { stackIntercept } from "@protobuf-ts/runtime-rpc";
import type { UsersReply } from "./user";
import type { EmptyRequest } from "./user";
import type { UnaryCall } from "@protobuf-ts/runtime-rpc";
import type { RpcOptions } from "@protobuf-ts/runtime-rpc";
/**
 * @generated from protobuf service user.Users
 */
export interface IUsersClient {
    /**
     * @generated from protobuf rpc: GetAll(user.EmptyRequest) returns (user.UsersReply);
     */
    getAll(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, UsersReply>;
    /**
     * @generated from protobuf rpc: GetById(user.UserFindRequest) returns (user.UserReply);
     */
    getById(input: UserFindRequest, options?: RpcOptions): UnaryCall<UserFindRequest, UserReply>;
    /**
     * @generated from protobuf rpc: Create(user.UserCreateRequest) returns (user.UserCreateReply);
     */
    create(input: UserCreateRequest, options?: RpcOptions): UnaryCall<UserCreateRequest, UserCreateReply>;
    /**
     * @generated from protobuf rpc: Update(user.UserUpdateRequest) returns (user.UserUpdateReply);
     */
    update(input: UserUpdateRequest, options?: RpcOptions): UnaryCall<UserUpdateRequest, UserUpdateReply>;
    /**
     * @generated from protobuf rpc: Delete(user.UserFindRequest) returns (user.EmptyReply);
     */
    delete(input: UserFindRequest, options?: RpcOptions): UnaryCall<UserFindRequest, EmptyReply>;
}
/**
 * @generated from protobuf service user.Users
 */
export class UsersClient implements IUsersClient, ServiceInfo {
    typeName = Users.typeName;
    methods = Users.methods;
    options = Users.options;
    constructor(private readonly _transport: RpcTransport) {
    }
    /**
     * @generated from protobuf rpc: GetAll(user.EmptyRequest) returns (user.UsersReply);
     */
    getAll(input: EmptyRequest, options?: RpcOptions): UnaryCall<EmptyRequest, UsersReply> {
        const method = this.methods[0], opt = this._transport.mergeOptions(options);
        return stackIntercept<EmptyRequest, UsersReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: GetById(user.UserFindRequest) returns (user.UserReply);
     */
    getById(input: UserFindRequest, options?: RpcOptions): UnaryCall<UserFindRequest, UserReply> {
        const method = this.methods[1], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserFindRequest, UserReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Create(user.UserCreateRequest) returns (user.UserCreateReply);
     */
    create(input: UserCreateRequest, options?: RpcOptions): UnaryCall<UserCreateRequest, UserCreateReply> {
        const method = this.methods[2], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserCreateRequest, UserCreateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Update(user.UserUpdateRequest) returns (user.UserUpdateReply);
     */
    update(input: UserUpdateRequest, options?: RpcOptions): UnaryCall<UserUpdateRequest, UserUpdateReply> {
        const method = this.methods[3], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserUpdateRequest, UserUpdateReply>("unary", this._transport, method, opt, input);
    }
    /**
     * @generated from protobuf rpc: Delete(user.UserFindRequest) returns (user.EmptyReply);
     */
    delete(input: UserFindRequest, options?: RpcOptions): UnaryCall<UserFindRequest, EmptyReply> {
        const method = this.methods[4], opt = this._transport.mergeOptions(options);
        return stackIntercept<UserFindRequest, EmptyReply>("unary", this._transport, method, opt, input);
    }
}
